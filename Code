Table Creations-
create schema caesar;
-- MySQL Script generated by MySQL Workbench
-- Fri Dec  6 16:45:52 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema caesar
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema caesar
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `caesar` DEFAULT CHARACTER SET utf8 ;
USE `caesar` ;

-- -----------------------------------------------------
-- Table `caesar`.`Trading Center`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`Trading Center` (
  `idTrading Center` INT NOT NULL,
  PRIMARY KEY (`idTrading Center`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`customer` (
  `idcustomer` INT NOT NULL AUTO_INCREMENT,
  `customer_name` VARCHAR(45) NOT NULL,
  `customer_contact_mobile` VARCHAR(12) NOT NULL,
  `customer_contact_email` VARCHAR(45) NOT NULL,
  `customer_full_address` VARCHAR(150) NOT NULL,
  `Trading Center_idTrading Center` INT NOT NULL,
  PRIMARY KEY (`idcustomer`, `Trading Center_idTrading Center`),
  INDEX `fk_customer_Trading Center_idx` (`Trading Center_idTrading Center` ASC) VISIBLE,
  CONSTRAINT `fk_customer_Trading Center`
    FOREIGN KEY (`Trading Center_idTrading Center`)
    REFERENCES `caesar`.`Trading Center` (`idTrading Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`products`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`products` (
  `idproducts` INT NOT NULL AUTO_INCREMENT,
  `products_type` VARCHAR(10) NOT NULL,
  `products_make` VARCHAR(10) NOT NULL,
  `products_count` INT NOT NULL,
  `Trading Center_idTrading Center` INT NOT NULL,
  PRIMARY KEY (`idproducts`, `Trading Center_idTrading Center`),
  INDEX `fk_products_Trading Center1_idx` (`Trading Center_idTrading Center` ASC) VISIBLE,
  CONSTRAINT `fk_products_Trading Center1`
    FOREIGN KEY (`Trading Center_idTrading Center`)
    REFERENCES `caesar`.`Trading Center` (`idTrading Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`Categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`Categories` (
  `idCategories` INT NOT NULL,
  `computers` VARCHAR(45) NOT NULL,
  `Accessories` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idCategories`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`voucher`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`voucher` (
  `idvoucher` INT NOT NULL AUTO_INCREMENT,
  `voucher_date` DATETIME NOT NULL,
  `voucher_status` VARCHAR(15) NOT NULL COMMENT 'Expected values- full payment or partial payment',
  PRIMARY KEY (`idvoucher`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`invoice`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`invoice` (
  `idinvoice` INT NOT NULL,
  `invoice_date` DATETIME NOT NULL,
  `invoice_update_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `voucher_idvoucher` INT NOT NULL,
  PRIMARY KEY (`idinvoice`, `voucher_idvoucher`),
  INDEX `fk_invoice_voucher1_idx` (`voucher_idvoucher` ASC) VISIBLE,
  CONSTRAINT `fk_invoice_voucher1`
    FOREIGN KEY (`voucher_idvoucher`)
    REFERENCES `caesar`.`voucher` (`idvoucher`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`orders` (
  `idorders` INT NOT NULL AUTO_INCREMENT,
  `customer_idcustomer` INT NOT NULL,
  `invoice_idinvoice` INT NOT NULL,
  PRIMARY KEY (`idorders`, `customer_idcustomer`, `invoice_idinvoice`),
  INDEX `fk_orders_customer1_idx` (`customer_idcustomer` ASC) VISIBLE,
  INDEX `fk_orders_invoice1_idx` (`invoice_idinvoice` ASC) VISIBLE,
  CONSTRAINT `fk_orders_customer1`
    FOREIGN KEY (`customer_idcustomer`)
    REFERENCES `caesar`.`customer` (`idcustomer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_orders_invoice1`
    FOREIGN KEY (`invoice_idinvoice`)
    REFERENCES `caesar`.`invoice` (`idinvoice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`payment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`payment` (
  `idpayment` INT NOT NULL AUTO_INCREMENT,
  `product_payment_id` INT NOT NULL,
  `payment_date` DATETIME NOT NULL,
  `payment_method` VARCHAR(10) NOT NULL,
  `payment_amount` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`idpayment`),
  UNIQUE INDEX `product_payment_id_UNIQUE` (`product_payment_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`Customer_transaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`Customer_transaction` (
  `idCustomer_transaction` INT NOT NULL AUTO_INCREMENT,
  `Customer_transaction_date` DATETIME NOT NULL,
  `Customer_transaction_type` VARCHAR(7) NOT NULL,
  `customer_idcustomer` INT NOT NULL,
  `customer_Trading Center_idTrading Center` INT NOT NULL,
  `payment_idpayment` INT NOT NULL,
  PRIMARY KEY (`idCustomer_transaction`, `customer_idcustomer`, `customer_Trading Center_idTrading Center`, `payment_idpayment`),
  INDEX `fk_Customer_transaction_customer1_idx` (`customer_idcustomer` ASC, `customer_Trading Center_idTrading Center` ASC) VISIBLE,
  INDEX `fk_Customer_transaction_payment1_idx` (`payment_idpayment` ASC) VISIBLE,
  CONSTRAINT `fk_Customer_transaction_customer1`
    FOREIGN KEY (`customer_idcustomer` , `customer_Trading Center_idTrading Center`)
    REFERENCES `caesar`.`customer` (`idcustomer` , `Trading Center_idTrading Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Customer_transaction_payment1`
    FOREIGN KEY (`payment_idpayment`)
    REFERENCES `caesar`.`payment` (`idpayment`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`defaulter_customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`defaulter_customer` (
  `iddefaulter_customer` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`iddefaulter_customer`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`new_consolidated_invoice`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`new_consolidated_invoice` (
  `idnew_consolidated_invoice` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`idnew_consolidated_invoice`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`products_has_Categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`products_has_Categories` (
  `products_idproducts` INT NOT NULL,
  `products_Trading Center_idTrading Center` INT NOT NULL,
  `Categories_idCategories` INT NOT NULL,
  PRIMARY KEY (`products_idproducts`, `products_Trading Center_idTrading Center`, `Categories_idCategories`),
  INDEX `fk_products_has_Categories_Categories1_idx` (`Categories_idCategories` ASC) VISIBLE,
  INDEX `fk_products_has_Categories_products1_idx` (`products_idproducts` ASC, `products_Trading Center_idTrading Center` ASC) VISIBLE,
  CONSTRAINT `fk_products_has_Categories_products1`
    FOREIGN KEY (`products_idproducts` , `products_Trading Center_idTrading Center`)
    REFERENCES `caesar`.`products` (`idproducts` , `Trading Center_idTrading Center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_products_has_Categories_Categories1`
    FOREIGN KEY (`Categories_idCategories`)
    REFERENCES `caesar`.`Categories` (`idCategories`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`orders_has_products`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`orders_has_products` (
  `orders_idorders` INT NOT NULL,
  `products_idproducts` INT NOT NULL,
  PRIMARY KEY (`orders_idorders`, `products_idproducts`),
  INDEX `fk_orders_has_products_products1_idx` (`products_idproducts` ASC) VISIBLE,
  INDEX `fk_orders_has_products_orders1_idx` (`orders_idorders` ASC) VISIBLE,
  CONSTRAINT `fk_orders_has_products_orders1`
    FOREIGN KEY (`orders_idorders`)
    REFERENCES `caesar`.`orders` (`idorders`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_orders_has_products_products1`
    FOREIGN KEY (`products_idproducts`)
    REFERENCES `caesar`.`products` (`idproducts`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `caesar`.`invoice_has_Customer_transaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `caesar`.`invoice_has_Customer_transaction` (
  `invoice_idinvoice` INT NOT NULL,
  `invoice_voucher_idvoucher` INT NOT NULL,
  `Customer_transaction_idCustomer_transaction` INT NOT NULL,
  PRIMARY KEY (`invoice_idinvoice`, `invoice_voucher_idvoucher`, `Customer_transaction_idCustomer_transaction`),
  INDEX `fk_invoice_has_Customer_transaction_Customer_transaction1_idx` (`Customer_transaction_idCustomer_transaction` ASC) VISIBLE,
  INDEX `fk_invoice_has_Customer_transaction_invoice1_idx` (`invoice_idinvoice` ASC, `invoice_voucher_idvoucher` ASC) VISIBLE,
  CONSTRAINT `fk_invoice_has_Customer_transaction_invoice1`
    FOREIGN KEY (`invoice_idinvoice` , `invoice_voucher_idvoucher`)
    REFERENCES `caesar`.`invoice` (`idinvoice` , `voucher_idvoucher`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_invoice_has_Customer_transaction_Customer_transaction1`
    FOREIGN KEY (`Customer_transaction_idCustomer_transaction`)
    REFERENCES `caesar`.`Customer_transaction` (`idCustomer_transaction`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

Note-Unfortunately by using forward engineering for the export of source code of the ERD, many unwanted foreign keys and indexes are created. Which made a difficult task for insertion of data. I had to remove a lot of foreign keys from the above creation code manually using the alter tool provided in mysql workbench. The original code that is being used in the rest of the project has alterations and might not look exactly the same as the above code.

Insertion Process-
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('2', 'Swapnil', '8572076798', 'swapnil@xyz.com', 'Boston,Massachusetts', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('3', 'Sal', '5714098945', 'sal@xyz.com', 'Massachusetts', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('4', 'John', '2541554455', 'john@gmail.com', 'Virginia', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('5', 'Michael Scott', '9118454454', 'michael_scott@dundermifflin.com', 'Scranton, Pennsylvania', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('6', 'Jim Halpert', '6541631854', 'big_tuna@dundermifflin.com', 'Scranton,Pennsylvalia', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('7', 'Dwight k Schrute', '8455665454', 'Ilovebeets@dunder.com', 'Beet Farm', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('8', 'Pam Halpert', '5414554414', 'Beesly@dmpc.com', 'bee farm', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('9', 'Kevin Malone', '6996699669', 'kevin69@dundermifflin.com', 'Pennsylvania', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('10', 'Creed Bratton', '6545555414', 'No_name@dundermifflin.com', 'Not known', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('11', 'Oscar Martinez', '5545655444', 'mexico_rocks@dmpc.com', 'New Mexico', '1');
INSERT INTO `caesar`.`customer` (`idcustomer`, `customer_name`, `customer_contact_mobile`, `customer_contact_email`, `customer_full_address`, `Trading Center_idTrading Center`) VALUES ('12', 'Todd Packer', '6544125525', 'heyitstodd@dmfc.com', 'Penn', '1');




INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('2', '2', '2 packs pen and sheets', '50', '2019-10-05 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('3', '1', '1 apple macbook pro', '2000', '2019-10-08 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('4', '5', '5 apple macbook pro 16 inch', '10000', '2019-11-22 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('5', '7', '1 Hd Display', '150', '2019-10-21 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('6', '12', '1 HP laptop', '350', '2019-12-20 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('7', '5', '7 Reems of paper', '100', '2019-11-13 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('8', '11', 'Pencil Pack', '4', '2019-09-12 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('9', '8', 'Google ChromeBook', '350', '2019-09-11 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('10', '9', 'Microsolf Surface pro', '1500', '2019-11-06 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('11', '10', 'Dell Inspiron 15', '1300', '2019-12-08 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('12', '6', 'Dell Charger', '100', '2019-11-07 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('13', '5', 'HP laptop', '750', '2019-11-11 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('14', '3', '3 Usb type-c', '150', '2019-12-23 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('15', '10', '5 packs of sharpener', '75', '2019-12-13 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('16', '2', 'Dell HD monitor', '250', '2019-10-25 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('17', '6', 'Apple Macbook Air', '850', '2019-10-30 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('18', '9', 'Apple macbook pro', '1700', '2019-09-15 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('19', '8', 'Dell inspiron 13', '1100', '2019-11-10 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`, `customer_idcustomer`, `order`, `order_amount`, `order_date`) VALUES ('20', '5', 'Microsoft SurfaceBook', '800', '2019-11-02 00:00:00');
INSERT INTO `caesar`.`orders` (`idorders`) VALUES ('');



INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('1', '2019-10-05 00:00:00', '2');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('2', '2019-10-08 00:00:00', '3');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('3', '2019-11-22 00:00:00', '4');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('4', '2019-10-21 00:00:00', '5');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('5', '2019-12-20 00:00:00', '6');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('6', '2019-11-13 00:00:00', '7');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('7', '2019-09-12 00:00:00', '8');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('8', '2019-09-11 00:00:00', '9');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('9', '2019-11-06 00:00:00', '10');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('10', '2019-12-08 00:00:00', '11');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('11', '2019-11-07 00:00:00', '12');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('12', '2019-11-11 00:00:00', '13');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('13', '2019-12-23 00:00:00', '14');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('14', '2019-12-13 00:00:00', '15');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('15', '2019-10-25 00:00:00', '16');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('16', '2019-10-30 00:00:00', '17');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('17', '2019-09-15 00:00:00', '18');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('18', '2019-11-10 00:00:00', '19');
INSERT INTO `caesar`.`invoice` (`idinvoice`, `invoice_date`, `idorders`) VALUES ('19', '2019-11-02 00:00:00', '20');


INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('1', '1', '2019-10-05 00:00:00\n', 'Cash', '50', '2', '1');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('2', '2', '2019-10-08 00:00:00\n', 'Cash', '2000', '1', '2');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('3', '3', '2019-11-22 00:00:00\n', 'Cheque', '10000', '5', '3');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('4', '4', '2019-10-21 00:00:00\n', 'Credit Card', '150', '7', '4');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('5', '5', '2019-12-20 00:00:00\n', 'Cash', '350', '12', '5');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('6', '6', '2019-11-13 00:00:00\n', 'Cheque', '100', '5', '6');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('7', '7', '2019-09-12 00:00:00\n', 'Credit Card', '4', '11', '7');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('8', '8', '2019-09-11 00:00:00\n', 'Cash', '350', '8', '8');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('9', '9', '2019-11-06 00:00:00\n', 'Credit Card', '1500', '9', '9');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('10', '10', '2019-12-08 00:00:00\n', 'Cheque', '1300', '10', '10');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('11', '11', '2019-11-07 00:00:00\n', 'Credit Card', '100', '6', '11');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('12', '12', '2019-11-11 00:00:00\n', 'Cash', '100', '5', '12');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('13', '13', '2019-12-23 00:00:00\n', 'Cheque', '150', '3', '13');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('14', '14', '2019-12-23 00:00:00\n', 'Credit Card', '75', '10', '14');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('15', '15', '2019-12-13 00:00:00\n', 'Cash', '250', '2', '15');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('16', '16', '2019-10-25 00:00:00\n', 'Cheque', '850', '6', '16');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('17', '17', '2019-10-30 00:00:00\n', 'Credit Card', '1700', '9', '17');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('18', '18', '2019-09-15 00:00:00\n', 'Credit Card', '1100', '8', '18');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_date`, `payment_method`, `payment_amount`, `idcustomer`, `idinvoice`) VALUES ('19', '19', '2019-11-10 00:00:00\n', 'Cash', '750', '5', '19');
INSERT INTO `caesar`.`payment` (`idpayment`, `product_payment_id`, `payment_method`) VALUES ('', '', '');
INSERT INTO `caesar`.`payment` (`idpayment`) VALUES ('');
INSERT INTO `caesar`.`payment` (`payment_method`) VALUES ('');


UPDATE `caesar`.`payment` SET `order_date` = '2019-10-05 00:00:00' WHERE (`idpayment` = '1');
UPDATE `caesar`.`payment` SET `order_date` = '2019-10-08 00:00:00' WHERE (`idpayment` = '2');
UPDATE `caesar`.`payment` SET `order_date` = '2019-09-22 00:00:00' WHERE (`idpayment` = '3');
UPDATE `caesar`.`payment` SET `order_date` = '2019-10-21 00:00:00' WHERE (`idpayment` = '4');
UPDATE `caesar`.`payment` SET `order_date` = '2019-12-20 00:00:00' WHERE (`idpayment` = '5');
UPDATE `caesar`.`payment` SET `order_date` = '2019-09-13 00:00:00' WHERE (`idpayment` = '6');
UPDATE `caesar`.`payment` SET `order_date` = '2019-09-12 00:00:00' WHERE (`idpayment` = '7');
UPDATE `caesar`.`payment` SET `order_date` = '2019-09-11 00:00:00' WHERE (`idpayment` = '8');
UPDATE `caesar`.`payment` SET `order_date` = '2019-11-06 00:00:00' WHERE (`idpayment` = '9');
UPDATE `caesar`.`payment` SET `order_date` = '2019-12-08 00:00:00' WHERE (`idpayment` = '10');
UPDATE `caesar`.`payment` SET `order_date` = '2019-08-07 00:00:00' WHERE (`idpayment` = '11');
UPDATE `caesar`.`payment` SET `order_date` = '2019-11-11 00:00:00' WHERE (`idpayment` = '12');
UPDATE `caesar`.`payment` SET `order_date` = '2019-12-23 00:00:00' WHERE (`idpayment` = '13');
UPDATE `caesar`.`payment` SET `order_date` = '2019-12-13 00:00:00' WHERE (`idpayment` = '14');
UPDATE `caesar`.`payment` SET `order_date` = '2019-08-25 00:00:00' WHERE (`idpayment` = '15');
UPDATE `caesar`.`payment` SET `order_date` = '2019-10-30 00:00:00' WHERE (`idpayment` = '16');
UPDATE `caesar`.`payment` SET `order_date` = '2019-09-15 00:00:00' WHERE (`idpayment` = '17');
UPDATE `caesar`.`payment` SET `order_date` = '2019-11-10 00:00:00' WHERE (`idpayment` = '18');
UPDATE `caesar`.`payment` SET `order_date` = '2019-11-02 00:00:00' WHERE (`idpayment` = '19');



Code-
CREATE DEFINER=`root`@`localhost` PROCEDURE `order_consolidation`()
BEGIN
if dayname(curdate()) = 'Friday'
then
select count(a.CashCount) AS 'CashCount', count(b.ChecqueCount), count(c.CreditCount), p.idcustomer, (IFNULL(SUM(a.payment_by_cash_amount),0)+ifnull((b.payment_by_cheque_amount),0)+ifnull(SUM(c.payment_by_creditcard_amount),0)) as 'total_payment'
from
  payment as p 
  left join (select (ca.product_payment_id) as 'CashCount', sum(ca.payment_amount) as `payment_by_cash_amount`, ca.idcustomer as 'idcustomer' 
	from payment ca where ca.payment_method = 'Cash'
		group by ca.idcustomer ) as a 
    on a.idcustomer = p.idcustomer and p.payment_method = 'Cash'
  left join (SELECT count(ch.product_payment_id) as 'ChecqueCount', sum(ch.payment_amount) as `payment_by_cheque_amount`, ch.idcustomer as 'idcustomer'
	from payment ch where ch.payment_method = 'Cheque'
		group by  ch.idcustomer) as b 
    on b.idcustomer = p.idcustomer and p.payment_method = 'Cheque'
  left join (select count(cr.product_payment_id) as 'CreditCount', sum(cr.payment_amount) as `payment_by_creditcard_amount`, cr.idcustomer as 'idcustomer'
	from payment cr where cr.payment_method = 'Credit Card' 
		group by cr.idcustomer) as c 
    on c.idcustomer = p.idcustomer and p.payment_method = 'Credit Card'
    	group by p.idcustomer;
        
        end if;
END

Note-This procedure runs everyday but it executes on every Friday of the week when manager assigns new invoice Id’s. So this is what I have done uniquely that nobody in the class could have thought of doing.
How to invoke this stored procedure-
Using scheduler:-
create event order_consolidation 
on schedule every 1 day
do
	call order_consolidation();

Results from this stored procedure-
 
•	Add defaulters-
This procedure points out the customer id’s which are in the defaulter category(Payment not done or payment done after 30 days of order). It also tells us the amount that the defaulter has ordered and not paid or paid after 30 days.
Code-
CREATE DEFINER=`root`@`localhost` PROCEDURE `add_defaulter`()
BEGIN
               select * from
(SELECT (b.total_order - a.total_payment) AS 'order_default', a.p_customer FROM
(SELECT SUM(p.payment_amount) AS 'total_payment', o.customer_idcustomer AS 'p_customer' FROM payment p
INNER JOIN invoice i on p.idinvoice = i.idinvoice
INNER JOIN orders o on i.idorders = o.idorders
WHERE timestampdiff(second,o.order_date,current_date)>2592000
group by o.customer_idcustomer) a
INNER JOIN ( SELECT SUM(o.order_amount) AS 'total_order', o.customer_idcustomer AS 'o_customer'
FROM orders o
WHERE timestampdiff(second,o.order_date,current_date)>2592000
group by o.customer_idcustomer) b ON a.p_customer = b.o_customer) Q
where Q.order_default > 0;
END
Note-This procedure runs everyday so as to calculate the amount that is owed by the customer to the trading center.

How to invoke this procedure daily-
CREATE EVENT add_defaulter_event
    ON SCHEDULE EVERY 1 day
    DO
      CALL add_defaulter();


 

•	Voucher production-
Voucher is given only to the customer that has been a defaulter. This procedure gives the estimate of the total owed amount to the trading center by the customer. It calculated the total amount that includes the interest of 3% after the 30 days period.

Code-
CREATE DEFINER=`root`@`localhost` PROCEDURE `voucher`()
BEGIN
Insert into voucher
select * from
(SELECT ((b.total_order - a.total_payment) * 1.03) AS 'order_default', a.p_customer FROM
(SELECT SUM(p.payment_amount) AS 'total_payment', o.customer_idcustomer AS 'p_customer' FROM payment p
INNER JOIN invoice i on p.idinvoice = i.idinvoice
INNER JOIN orders o on i.idorders = o.idorders
WHERE timestampdiff(second,o.order_date,current_date)>2592000
group by o.customer_idcustomer) a
INNER JOIN ( SELECT SUM(o.order_amount) AS 'total_order', o.customer_idcustomer AS 'o_customer'
FROM orders o
WHERE timestampdiff(second,o.order_date,current_date)>2592000
group by o.customer_idcustomer) b ON a.p_customer = b.o_customer) Q
where Q.order_default > 0;

END

How do we call the procedure-
create event order_consolidation 
on schedule every 1 day
do
	call voucher();

Output of the procedure-

 

Answers to the questions asked by the operation manager-
1.	The process will be fully automated by taking help of the job scheduler which helps us to call a procedure as we need.
The jobs that I applied to this data base are listed below-
-  CREATE EVENT voucher_updation
    ON SCHEDULE EVERY 1 day
    DO
      CALL voucher();


-	create event order_consolidation 
on schedule every 1 day
do
	call add_defaulter();
